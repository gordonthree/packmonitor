; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
default_envs = avr128da28_A

[env:fuses_bootloader]
board_hardware.oscillator = external
board_hardware.uart = uart0
board_bootloader.speed = 115200
board_hardware.bod = 2.7v
board_hardware.eesave = yes
upload_protocol = usbtiny

[env:avr128da28_A]
platform                  = atmelmegaavr
framework                 = arduino
board                     = AVR128DA28
board_build.f_cpu         = 24000000L
board_hardware.oscillator = internal
board_build.variant       = 28pin-standard
board_fuses.wdtcfg        = 0x00 ; disabled?
board_fuses.bodcfg        = 0x00 ; BOD disabled
board_fuses.osccfg        = 0x00 ; internal hs clock
board_fuses.syscfg0       = 0xC9 ; crc disabled, protect user eeprom
board_fuses.syscfg1       = 0x04 ; 8ms startup delay
board_fuses.codesize      = 0x00 ; entire flash is boot accessible
board_fuses.bootsize      = 0x00
build_unflags =
build_flags = -DMCU_AVR128DA28
			  -DTWI_MANDS_SINGLE            ; From boards.txt
			  -DTWI_MANDS                   ; From MX682X
              -DCORE_ATTACH_ALL             ; From boards.txt
              -Wl,-u,vfprintf -lprintf_flt  ; from boards.txt full printf support
            ;   -DPM_FIRSTRUN

monitor_speed   = 115200
monitor_port    = /dev/ttyUSB1
upload_protocol = custom
upload_flags =
    -tuart 
	-davr128da28
    -u$UPLOAD_PORT 
    -c$UPLOAD_SPEED
    -vwarning
upload_command = echo $UPLOAD_FLAGS && pymcuprog erase $UPLOAD_FLAGS && pymcuprog write $UPLOAD_FLAGS -f $SOURCE
;upload_command = echo $UPLOAD_FLAGS
;reset_command = pymcuprog reset -tuart -davr128da28 -u/dev/ttyUSB0
upload_port = /dev/ttyUSB0
upload_speed = 230400
lib_deps =
 https://github.com/PaulStoffregen/Time
 robtillaart/I2C_EEPROM
;  https://github.com/gordonthree/nau7802 @ 0.0.1
;  https://github.com/gordonthree/packmonlib

[env:avr128da28_B]
platform = atmelmegaavr
;platform_packages = 
; platformio/framework-arduino-megaavr-dxcore
framework = arduino
board = AVR128DA28
board_build.f_cpu = 24000000L
board_hardware.oscillator = internal
board_build.variant = 28pin-standard
board_fuses.wdtcfg   = 0x00 ; disabled?
board_fuses.bodcfg   = 0x00 ; BOD disabled
board_fuses.osccfg   = 0x00 ; internal hs clock
board_fuses.syscfg0  = 0xC9 ; crc disabled, protect user eeprom
board_fuses.syscfg1  = 0x04 ; 8ms startup delay
board_fuses.codesize = 0x00 ; entire flash is boot accessible
board_fuses.bootsize = 0x00 ; dunno?
build_unflags =
build_flags = -DMCU_AVR128DA28
			  -DTWI_MANDS_SINGLE            ; From boards.txt
			  -DTWI_MANDS                   ; From MX682X
              -DCORE_ATTACH_ALL             ; From boards.txt
              -Wl,-u,vfprintf -lprintf_flt  ; from boards.txt full printf support
            ;   -DPM_FIRSTRUN

;              -DTWI0_DUALCTRL
;              -D PM_SLAVE_ADDRESS=0x39

monitor_speed = 115200
monitor_port = /dev/ttyUSB2
upload_protocol = custom
upload_flags =
    -tuart 
	-davr128da28
    -u$UPLOAD_PORT 
    -c$UPLOAD_SPEED
    -vwarning
upload_command = echo $UPLOAD_FLAGS && pymcuprog erase $UPLOAD_FLAGS && pymcuprog write $UPLOAD_FLAGS -f $SOURCE
;reset_command = pymcuprog reset -tuart -davr128da28 -u/dev/ttyUSB2
;upload_command = pymcuprog erase $UPLOAD_FLAGS && pymcuprog write $UPLOAD_FLAGS -f $SOURCE
upload_port = /dev/ttyUSB1
upload_speed = 230400
lib_deps =
 https://github.com/PaulStoffregen/Time
 robtillaart/I2C_EEPROM
;  https://github.com/gordonthree/nau7802 @ 0.0.1
;  https://github.com/gordonthree/packmonlib

[env:avr128da32]
platform = atmelmegaavr
framework = arduino
board = AVR128DA32
board_build.f_cpu = 24000000L
board_hardware.oscillator = internal
board_build.variant = 32pin-standard
build_unflags =
build_flags = -DMCU_AVR128DA32
              -DCORE_ATTACH_ALL             ; From boards.txt
              -Wl,-u,vfprintf -lprintf_flt  ; from boards.txt full printf support
			  -DTWI_MORS_BOTH                   ; From boards.txt
			  -DTWI_USING_WIRE1             ; maybe?
            ;   -DPM_FIRSTRUN

;			  -DTWI_MORS

monitor_speed = 921600
monitor_port = /dev/ttyACM0
lib_deps =
 https://github.com/PaulStoffregen/Time
 robtillaart/I2C_EEPROM
;  https://github.com/gordonthree/nau7802
;  https://github.com/gordonthree/packmonlib

[env:every_fuses_bootloader]
; Upload protocol for used to set fuses/bootloader
upload_protocol = ${env:Upload_UPDI.upload_protocol}
upload_flags = -v
; Hardware settings
board_hardware.bod = 2.7v
board_hardware.eesave = yes
board_hardware.uart = no_bootloader
board_hardware.rstpin = reset

[env:Upload_UPDI]
; Upload protocol for UPDI upload
upload_protocol = jtag2updi
upload_port = /dev/ttyUSB0
board_upload.speed = 115200
;upload_protocol = xplainedmini_updi
upload_flags = -v
;extra_scripts = pre:reset.py
board_upload.use_1200bps_touch = yes
board_upload.wait_for_upload_port = yes

[env:custom_fuses]
platform = atmelmegaavr
;platform_packages = 
; platformio/framework-arduino-megaavr-dxcore
framework = arduino
board = AVR128DA28
board_build.f_cpu = 24000000L
board_hardware.oscillator = internal
board_build.variant = 28pin-standard
board_fuses.wdtcfg   = 0x00 ; disabled?
board_fuses.bodcfg   = 0x00 ; BOD disabled
board_fuses.osccfg   = 0x00 ; internal hs clock
board_fuses.syscfg0  = 0xC9 ; crc disabled, protect user eeprom
board_fuses.syscfg1  = 0x04 ; 8ms startup delay
board_fuses.codesize = 0x00 ; entire flash is boot accessible
board_fuses.bootsize = 0x00
;upload_command = echo $UPLOAD_FLAGS && pymcuprog erase $UPLOAD_FLAGS && pymcuprog write $UPLOAD_FLAGS -f $SOURCE
;upload_command = pymcuprog erase $UPLOAD_FLAGS && pymcuprog write $UPLOAD_FLAGS -f $SOURCE
